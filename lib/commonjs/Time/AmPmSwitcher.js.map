{"version":3,"names":["AmPmSwitcher","onChange","hours","setMode","mode","React","useContext","DisplayModeContext","theme","useTheme","backgroundColor","useMemo","dark","Color","colors","surface","lighten","hex","darken","isAM","styles","root","borderColor","borderRadius","roundness","switchSeparator","SwitchButton","label","onPress","selected","disabled","color","useSwitchColors","switchButton","switchButtonInner","fonts","medium","fontFamily","StyleSheet","create","width","height","borderWidth","overflow","flex","alignItems","justifyContent"],"sources":["AmPmSwitcher.tsx"],"sourcesContent":["import * as React from 'react'\nimport { View, StyleSheet } from 'react-native'\nimport { Text, TouchableRipple, useTheme } from 'react-native-paper'\nimport { useMemo } from 'react'\nimport Color from 'color'\nimport { useSwitchColors } from './timeUtils'\nimport { DisplayModeContext } from './TimePicker'\n\nexport default function AmPmSwitcher({\n  onChange,\n  hours,\n}: {\n  hours: number\n  onChange: (newHours: number) => any\n}) {\n  const { setMode, mode } = React.useContext(DisplayModeContext)\n  const theme = useTheme()\n  const backgroundColor = useMemo<string>(() => {\n    if (theme.dark) {\n      return Color(theme.colors.surface).lighten(1.2).hex()\n    }\n    return Color(theme.colors.surface).darken(0.1).hex()\n  }, [theme])\n\n  const isAM = mode === 'AM'\n  return (\n    <View\n      style={[\n        styles.root,\n        {\n          borderColor: backgroundColor,\n          borderRadius: theme.roundness,\n        },\n      ]}\n    >\n      <SwitchButton\n        label=\"AM\"\n        onPress={() => {\n          setMode('AM')\n          if (hours - 12 >= 0) {\n            onChange(hours - 12)\n          }\n        }}\n        selected={isAM}\n        disabled={isAM}\n      />\n      <View style={[styles.switchSeparator, { backgroundColor }]} />\n      <SwitchButton\n        label=\"PM\"\n        onPress={() => {\n          setMode('PM')\n          if (hours + 12 <= 24) {\n            onChange(hours + 12)\n          }\n        }}\n        selected={!isAM}\n        disabled={!isAM}\n      />\n    </View>\n  )\n}\n\nexport function SwitchButton({\n  label,\n  onPress,\n  selected,\n  disabled,\n}: {\n  label: string\n  onPress: (() => any) | undefined\n  selected: boolean\n  disabled: boolean\n}) {\n  const theme = useTheme()\n  const { backgroundColor, color } = useSwitchColors(selected)\n\n  return (\n    <TouchableRipple\n      onPress={onPress}\n      style={styles.switchButton}\n      accessibilityLabel={label}\n      // @ts-ignore old React Native versions\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      // @ts-ignore old React Native versions\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"button\"\n      accessibilityState={{ disabled }}\n      disabled={disabled}\n    >\n      <View style={[styles.switchButtonInner, { backgroundColor }]}>\n        <Text\n          selectable={false}\n          style={[\n            {\n              ...theme.fonts.medium,\n              color: color,\n              fontFamily: 'Poppins-SemiBold',\n            },\n          ]}\n        >\n          {label}\n        </Text>\n      </View>\n    </TouchableRipple>\n  )\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    width: 50,\n    height: 80,\n    borderWidth: 1,\n    overflow: 'hidden',\n  },\n  switchSeparator: {\n    height: 1,\n    width: 48,\n  },\n  switchButton: {\n    flex: 1,\n  },\n  switchButtonInner: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n})\n"],"mappings":"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"}